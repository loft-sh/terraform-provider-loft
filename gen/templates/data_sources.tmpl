//// Code generated by go-swagger; DO NOT EDIT.

{{ define "handleNonBodyParam" }}
	{{ camelize .ID }}Val, {{ camelize .ID }}IsSet := d.GetOk("{{ snakize .ID}}")
	if({{ camelize .ID }}IsSet){
		{{- if eq (camelize .ID) "id" }}
			{{ camelize .ID }}, _ := strconv.Atoi({{ camelize .ID }}Val.(string))
			params.{{ pascalize .ID}} = {{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}{{ end }}{{ if not .IsFileParam }}{{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}&{{ end }}int32({{ camelize .ID }}){{ else }}runtime.NamedReadCloser{{- end -}}
		{{- else }}
			params.{{ pascalize .ID}} = {{ camelize .ID }}Val.({{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}*{{ end }}{{ .GoType }})
		{{- end }}
	} {{ if .Required }} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - {{ .Name }}")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	} {{ end }}
{{ end }}

{{- $operationGroup := .Name -}} {{/* friendly reminder that operation groups map to OpenAPI Tags */}}

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (

)

{{- $modelName := splitList "." .Name | last }}
{{- $modelsName := $modelName | pluralizeFirstWord }}
{{- $isClusterScoped := stringContains $modelName "Project" }}

func {{ pascalize $modelName }}DataSource() *schema.Resource {
	return &schema.Resource{
		Description: "{{ .Description }}",
		Schema:      {{ camelize $modelName }}DataSourceSchema(),
		ReadContext: dataSource{{ pascalize $modelName }}Read,
	}
}


func {{ camelize $modelName }}DataSourceSchema() map[string]*schema.Schema {
	attributes := {{ camelize $modelName }}Attributes()

	metadataSchema := attributes["metadata"].Elem.(*schema.Resource)

	metadataSchema.Schema["name"].Computed = false
	metadataSchema.Schema["name"].Optional = false
	metadataSchema.Schema["name"].Required = true
	metadataSchema.Schema["name"].ConflictsWith = nil

	metadataSchema.Schema["generate_name"].ConflictsWith = nil
	metadataSchema.Schema["generate_name"].AtLeastOneOf = nil

	{{ if not $isClusterScoped }}
	metadataSchema.Schema["namespace"].Computed = false
	metadataSchema.Schema["namespace"].Optional = false
	metadataSchema.Schema["namespace"].Required = true
	{{- end }}

	attributes["spec"].Required = false
	attributes["spec"].Computed = true

	return attributes
}

func dataSource{{ pascalize $modelName }}Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	{{- if $isClusterScoped }}
	metadata := metav1.ObjectMeta{
		Name: d.Get("metadata.0.name").(string),
	}
	{{- else }}
	metadata := metav1.ObjectMeta{
		Namespace: d.Get("metadata.0.namespace").(string),
		Name: d.Get("metadata.0.name").(string),
	}
	{{- end }}
	d.SetId(utils.ReadId(metadata))

	return {{ camelize $modelName }}Read(ctx, d, meta)
}
