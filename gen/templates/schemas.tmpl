//// Code generated by go-swagger; DO NOT EDIT.

{{ define "handleNonBodyParam" }}
	{{ camelize .ID }}Val, {{ camelize .ID }}IsSet := d.GetOk("{{ snakize .ID}}")
	if({{ camelize .ID }}IsSet){
		{{- if eq (camelize .ID) "id" }}
			{{ camelize .ID }}, _ := strconv.Atoi({{ camelize .ID }}Val.(string))
			params.{{ pascalize .ID}} = {{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}{{ end }}{{ if not .IsFileParam }}{{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}&{{ end }}int32({{ camelize .ID }}){{ else }}runtime.NamedReadCloser{{- end -}}
		{{- else }}
			params.{{ pascalize .ID}} = {{ camelize .ID }}Val.({{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}*{{ end }}{{ .GoType }})
		{{- end }}
	} {{ if .Required }} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - {{ .Name }}")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	} {{ end }}
{{ end }}

{{- $operationGroup := .Name -}} {{/* friendly reminder that operation groups map to OpenAPI Tags */}}

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/loft-sh/terraform-provider-loft/loft/utils"
)

{{- $modelName := trimPrefix "com.github.loft-sh.api.v3.pkg.apis" .Name }}
{{- $modelName = trimPrefix "com.github.loft-sh.agentapi.v3.pkg.apis.loft" $modelName }}
func {{ pascalize $modelName }}Schema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
	{{- range .Properties }}
		"{{ .Name | snakize}}": {
		{{- if (stringContains .GoType "[]*") }}
			Type: schema.TypeList,
			Elem: &schema.Resource{
			{{- if hasPrefix .GoType "[]*ComGithubLoftShAPIV3PkgApis" }}
				Schema: {{ trimPrefix "[]*ComGithubLoftShAPIV3PkgApis" .GoType | pascalize }}Schema(),
			{{- else }}
				Schema: {{ trimPrefix "[]*ComGithubLoftShAgentapiV3PkgApisLoft" .GoType | pascalize }}Schema(),
			{{- end}}
			},
		{{- else if (eq .GoType "[]string") }}
			Type:        schema.TypeList,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		{{- else if (eq .GoType "string") }}
			Type: schema.TypeString,
		{{- else if (eq .GoType "bool") }}
			Type: schema.TypeBool,
		{{- else if eq .GoType "int64" }}
			Type: schema.TypeInt,
		{{- else if eq .GoType "int32" }}
			Type: schema.TypeInt,
		{{- else if eq .GoType "interface{}" }}
			Type: schema.TypeMap,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		{{- else if (stringContains .GoType "map[string]") }}
			Type: schema.TypeMap,
			{{- if trimPrefix "map[string]" .GoType | eq "string" }}
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
			{{- else }}
			Elem: &schema.Resource{
			{{- if hasPrefix .GoType "map[string]ComGithubLoftShAPIV3PkgApis" }}
				Schema: {{ trimPrefix "map[string]ComGithubLoftShAPIV3PkgApis" .GoType | pascalize }}Schema(),
			{{- else }}
				Schema: {{ trimPrefix "map[string]ComGithubLoftShAgentapiV3PkgApisLoft" .GoType | pascalize }}Schema(),
			{{- end}}
			},
			{{- end }}
		{{- else }}
			Type: schema.TypeList,
			MinItems:    1,
			MaxItems:    1,
			Elem: &schema.Resource{
			{{- if hasPrefix .GoType "ComGithubLoftShAPIV3PkgApis" }}
				Schema: {{ trimPrefix "ComGithubLoftShAPIV3PkgApis" .GoType | pascalize }}Schema(),
			{{- else }}
				Schema: {{ trimPrefix "ComGithubLoftShAgentapiV3PkgApisLoft" .GoType | pascalize }}Schema(),
			{{- end}}
			},
		{{- end }}
		{{- if (not (eq .Description "")) }}
			Description: "{{ .Description | replace "\"" "\\\"" }}",
		{{- end }}
		{{- if .Default }}
			Default: {{ .Default }},
		{{- end }}
		{{- if and .Required (not .ReadOnly) }}
			Required: true,
		{{- else if .ReadOnly }}
			Computed: true,
		{{- else }}
			Optional: true,
		{{- end }}
		},
	{{- end }}
	}
}
