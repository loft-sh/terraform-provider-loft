//// Code generated by go-swagger; DO NOT EDIT.

{{ define "handleNonBodyParam" }}
	{{ camelize .ID }}Val, {{ camelize .ID }}IsSet := d.GetOk("{{ snakize .ID}}")
	if({{ camelize .ID }}IsSet){
		{{- if eq (camelize .ID) "id" }}
			{{ camelize .ID }}, _ := strconv.Atoi({{ camelize .ID }}Val.(string))
			params.{{ pascalize .ID}} = {{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}{{ end }}{{ if not .IsFileParam }}{{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}&{{ end }}int32({{ camelize .ID }}){{ else }}runtime.NamedReadCloser{{- end -}}
		{{- else }}
			params.{{ pascalize .ID}} = {{ camelize .ID }}Val.({{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}*{{ end }}{{ .GoType }})
		{{- end }}
	} {{ if .Required }} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - {{ .Name }}")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	} {{ end }}
{{ end }}

{{- $operationGroup := .Name -}} {{/* friendly reminder that operation groups map to OpenAPI Tags */}}

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	agentstoragev1 "github.com/loft-sh/agentapi/v3/pkg/apis/loft/storage/v1"
	managementv1 "github.com/loft-sh/api/v3/pkg/apis/management/v1"
	storagev1 "github.com/loft-sh/api/v3/pkg/apis/storage/v1"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
)

{{- $modelName := trimPrefix "com.github.loft-sh.api.v3.pkg.apis" .Name }}
{{- $modelName = trimPrefix "com.github.loft-sh.agentapi.v3.pkg.apis.loft" $modelName }}
{{- $modelName = trimPrefix "io.k8s.apimachinery.pkg.apis" $modelName }}
func {{ pascalize $modelName }}Schema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
	{{- range .Properties }}
		"{{ .Name | snakize}}": {
		{{- if (stringContains .GoType "[]*") }}
			Type: schema.TypeList,
			Elem: &schema.Resource{
			{{- if hasPrefix .GoType "[]*ComGithubLoftShAPIV3PkgApis" }}
				Schema: {{ trimPrefix "[]*ComGithubLoftShAPIV3PkgApis" .GoType | pascalize }}Schema(),
			{{- else if hasPrefix .GoType "[]*ComGithubLoftShAgentapiV3PkgApisLoft" }}
				Schema: {{ trimPrefix "[]*ComGithubLoftShAgentapiV3PkgApisLoft" .GoType | pascalize }}Schema(),
			{{- else }}
				Schema: {{ trimPrefix "[]*IoK8sApimachineryPkgApis" .GoType | pascalize }}Schema(),
			{{- end}}
			},
		{{- else if (eq .GoType "[]string") }}
			Type:        schema.TypeList,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		{{- else if (eq .GoType "string") }}
			Type: schema.TypeString,
		{{- else if (eq .GoType "bool") }}
			Type: schema.TypeBool,
		{{- else if eq .GoType "int64" }}
			Type: schema.TypeInt,
		{{- else if eq .GoType "int32" }}
			Type: schema.TypeInt,
		{{- else if eq .GoType "interface{}" }}
			Type: schema.TypeMap,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
		{{- else if (stringContains .GoType "map[string]") }}
			Type: schema.TypeMap,
			{{- if trimPrefix "map[string]" .GoType | eq "string" }}
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
			{{- else }}
			Elem: &schema.Resource{
			{{- if hasPrefix .GoType "map[string]ComGithubLoftShAPIV3PkgApis" }}
				Schema: {{ trimPrefix "map[string]ComGithubLoftShAPIV3PkgApis" .GoType | pascalize }}Schema(),
			{{- else if hasPrefix .GoType "map[string]ComGithubLoftShAgentapiV3PkgApisLoft" }}
				Schema: {{ trimPrefix "map[string]ComGithubLoftShAgentapiV3PkgApisLoft" .GoType | pascalize }}Schema(),
			{{- else }}
				Schema: {{ trimPrefix "map[string]IoK8sApimachineryPkgApis" .GoType | pascalize }}Schema(),
			{{- end}}
			},
			{{- end }}
		{{- else if .IsPrimitive }}
			{{- if eq .SwaggerType "string"}}
				Type: schema.TypeString,
			{{- end}}
		{{- else }}
			Type: schema.TypeList,
			MinItems:    1,
			MaxItems:    1,
			Elem: &schema.Resource{
			{{- if hasPrefix .GoType "ComGithubLoftShAPIV3PkgApis" }}
				Schema: {{ trimPrefix "ComGithubLoftShAPIV3PkgApis" .GoType | pascalize }}Schema(),
			{{- else if hasPrefix .GoType "ComGithubLoftShAgentapiV3PkgApisLoft" }}
				Schema: {{ trimPrefix "ComGithubLoftShAgentapiV3PkgApisLoft" .GoType | pascalize }}Schema(),
			{{- else }}
				Schema: {{ trimPrefix "IoK8sApimachineryPkgApis" .GoType | pascalize }}Schema(),
			{{- end}}
			},
		{{- end }}
		{{- if (not (eq .Description "")) }}
			Description: "{{ .Description | replace "\"" "\\\"" | replace "\n" "\\n" }}",
		{{- end }}
		{{- if .Default }}
			Default: {{ .Default }},
		{{- end }}
		{{- if and .Required (not .ReadOnly) }}
			Required: true,
		{{- else if .ReadOnly }}
			Computed: true,
		{{- else }}
			Optional: true,
		{{- end }}
		},
	{{- end }}
	}
}

{{ $pkgName := "" }}
{{- if (stringContains .Name "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1") }}
	{{ $pkgName = .Name | replace "com.github.loft-sh.agentapi.v3.pkg.apis.loft.storage.v1" "agentstoragev1" }}
{{- else if (stringContains .Name "com.github.loft-sh.api.v3.pkg.apis.storage.v1") }}
	{{ $pkgName = .Name | replace "com.github.loft-sh.api.v3.pkg.apis.storage.v1" "storagev1" }}
{{- else }}
	{{ $pkgName = .Name | replace "com.github.loft-sh.api.v3.pkg.apis.management.v1" "managementv1" }}
{{- end }}

func Create{{ pascalize $modelName }}(data map[string]interface{}) *{{ $pkgName }} {
{{- if stringContains $pkgName "management" }}
	ret := {{ $pkgName | replace "management" "storage" }}{}

	if utils.HasKeys(data) {
{{- else }}
	if !utils.HasKeys(data) {
		return nil
	}

	ret := &{{ $pkgName }}{}
{{- end}}

{{- range .Properties }}
	{{- if .IsPrimitive }}
		{{- if eq .GoType "string" }}
	if v, ok := data["{{ snakize .Name }}"].({{.GoType}}); ok && len(v) > 0 {
		ret.{{ .Name | title }} = v
	}
		{{- else }}
	if v, ok := data["{{ snakize .Name }}"].({{.GoType}}); ok {
		ret.{{ .Name | title }} = v
	}
		{{- end}}
	{{- else if .IsArray }}
		{{- if .Items.IsPrimitive }}
	var {{varname .Name }}Items []{{ .Items.GoType }}
	for _, v := range data["{{ snakize .Name }}"].([]interface{}) {
		{{varname .Name }}Items = append({{varname .Name }}Items, v.({{.Items.GoType}}))
	}
	ret.{{ .Name | title }} = {{varname .Name }}Items
		{{- else }}
			{{ $itemType := "" }}
			{{- if hasPrefix .Items.GoType "ComGithubLoftShAPIV3PkgApisStorageV1" }}
				{{ $itemType = print "storagev1." ( trimPrefix "ComGithubLoftShAPIV3PkgApisStorageV1" .Items.GoType ) }}
			{{- else if hasPrefix .Items.GoType "ComGithubLoftShAgentapiV3PkgApisLoftStorageV1" }}
				{{ $itemType = print "agentstoragev1." ( trimPrefix "ComGithubLoftShAgentapiV3PkgApisLoftStorageV1" .Items.GoType ) }}
			{{- else }}
				{{ $itemType = .Items.GoType }}
			{{- end }}
	var {{varname .Name }}Items []{{ $itemType }}
	for _, v := range data["{{ snakize .Name }}"].([]interface{}) {
		if v == nil {
			continue
		}
			{{- if hasPrefix .Items.GoType "ComGithubLoftShAPIV3PkgApis" }}
		if item := Create{{ trimPrefix "ComGithubLoftShAPIV3PkgApis" .Items.GoType }}(v.(map[string]interface{})); item != nil {
			{{- else if hasPrefix .Items.GoType "ComGithubLoftShAgentapiV3PkgApisLoft" }}
		if item := Create{{ trimPrefix "ComGithubLoftShAgentapiV3PkgApisLoft" .Items.GoType }}(v.(map[string]interface{})); item != nil {
			{{- else }}
		if item := Create{{ trimPrefix "IoK8sApimachineryPkgApis" .Items.GoType }}(v.(map[string]interface{}))); item != nil {
			{{- end}}
			{{varname .Name }}Items = append({{varname .Name }}Items, *item)
		}
	}
	ret.{{ .Name | title }} = {{varname .Name }}Items
		{{- end }}
	{{- else if .IsMap }}
	ret.{{ .Name | title }} = utils.AttributesToMap(data["{{ snakize .Name }}"].(map[string]interface{}))
	{{- else }}
		{{ $createFunc := "" }}
		{{- if hasPrefix .GoType "ComGithubLoftShAPIV3PkgApis" }}
			{{ $createFunc = trimPrefix "ComGithubLoftShAPIV3PkgApis" .GoType }}
		{{- else if hasPrefix .GoType "ComGithubLoftShAgentapiV3PkgApisLoft" }}
			{{ $createFunc = trimPrefix "ComGithubLoftShAgentapiV3PkgApisLoft" .GoType }}
		{{- else }}
			{{ $createFunc = trimPrefix "IoK8sApimachineryPkgApis" .GoType }}
		{{- end}}
	if v, ok := data["{{ snakize .Name }}"].([]interface{}); ok && len(v) > 0 && v[0] != nil {
		ret.{{ .Name | title }} = *Create{{$createFunc}}(v[0].(map[string]interface{}))
	}
	{{- end }}
{{ end }}

{{- if stringContains $pkgName "management" }}
	}

	return &{{ $pkgName }}{
		{{ $pkgName | replace "managementv1." "" }}: ret,
	}
{{- else }}
	return ret
{{- end}}
}

func Read{{ pascalize $modelName }}(obj *{{ $pkgName }}) (interface{}, error) {
	if obj == nil {
		return nil, nil
	}

	values := map[string]interface{}{}
	{{- range .Properties }}
		{{- if or .IsPrimitive .IsMap }}
			{{- if eq .Name "permission" }}
	values["allow"] = obj.Allow
			{{- else }}
	values["{{ snakize .Name }}"] = obj.{{ .Name | title }}
			{{- end}}
		{{- else if .IsArray }}
	var {{varname .Name }}Items []interface{}
	for _, v := range obj.{{ pascalize .Name}} {
			{{- if .Items.IsPrimitive }}
		{{varname .Name }}Items = append({{varname .Name }}Items, v)
			{{- else }}
				{{- if hasPrefix .Items.GoType "ComGithubLoftShAPIV3PkgApis" }}
		item, err := Read{{ trimPrefix "ComGithubLoftShAPIV3PkgApis" .Items.GoType }}(&v)
				{{- else if hasPrefix .Items.GoType "ComGithubLoftShAgentapiV3PkgApisLoft" }}
		item, err := Read{{ trimPrefix "ComGithubLoftShAgentapiV3PkgApisLoft" .Items.GoType }}(&v)
				{{- else }}
		item, err := Read{{ trimPrefix "IoK8sApimachineryPkgApis" .Items.GoType }}(&v)
				{{- end}}
		if err != nil {
			return nil, err
		}
		{{varname .Name }}Items = append({{varname .Name }}Items, item)
			{{- end }}
	}
	values["{{ snakize .Name }}"] = {{varname .Name }}Items
		{{- else }}
			{{- if hasPrefix .GoType "ComGithubLoftShAPIV3PkgApis" }}

	{{varname .Name }}, err := Read{{ trimPrefix "ComGithubLoftShAPIV3PkgApis" .GoType }}(obj.{{ pascalize .Name}})
			{{- else if hasPrefix .GoType "ComGithubLoftShAgentapiV3PkgApisLoft" }}
	{{varname .Name }}, err := Read{{ trimPrefix "ComGithubLoftShAgentapiV3PkgApisLoft" .GoType }}(obj.{{ pascalize .Name}})
			{{- else }}
	{{varname .Name }}, err := Read{{ trimPrefix "IoK8sApimachineryPkgApis" .GoType }}(obj.{{ pascalize .Name}})
			{{- end}}
	if err != nil {
		return nil, err
	}
	values["{{ snakize .Name }}"] = {{varname .Name }}
		{{- end }}
	{{ end }}
	return values, nil
}