//// Code generated by go-swagger; DO NOT EDIT.

{{ define "handleNonBodyParam" }}
	{{ camelize .ID }}Val, {{ camelize .ID }}IsSet := d.GetOk("{{ snakize .ID}}")
	if({{ camelize .ID }}IsSet){
		{{- if eq (camelize .ID) "id" }}
			{{ camelize .ID }}, _ := strconv.Atoi({{ camelize .ID }}Val.(string))
			params.{{ pascalize .ID}} = {{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}{{ end }}{{ if not .IsFileParam }}{{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}&{{ end }}int32({{ camelize .ID }}){{ else }}runtime.NamedReadCloser{{- end -}}
		{{- else }}
			params.{{ pascalize .ID}} = {{ camelize .ID }}Val.({{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}*{{ end }}{{ .GoType }})
		{{- end }}
	} {{ if .Required }} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - {{ .Name }}")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	} {{ end }}
{{ end }}

{{- $operationGroup := .Name -}} {{/* friendly reminder that operation groups map to OpenAPI Tags */}}

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/loft-sh/loftctl/v3/pkg/client"
	"github.com/loft-sh/terraform-provider-loft/pkg/schemas"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
	managementv1 "github.com/loft-sh/api/v3/pkg/apis/management/v1"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

{{- $modelName := splitList "." .Name | last }}
{{- $modelsName := $modelName | pluralizeFirstWord }}
func {{ pascalize $modelName }}Resource() *schema.Resource {
	return &schema.Resource{
		Description: "{{ .Description | replace "\"" "\\\"" | replace "\n" "\\n" }}",
		Schema: {{ camelize $modelName }}Attributes(),
		CreateContext: {{ camelize $modelName }}Create,
		ReadContext: {{ camelize $modelName }}Read,
		UpdateContext: {{ camelize $modelName }}Update,
		DeleteContext: {{ camelize $modelName }}Delete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

{{- $isClusterScoped := stringContains $modelName "Project" }}

func {{ camelize $modelName }}Attributes() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"id": {
			Type:        schema.TypeString,
			Computed:    true,
			{{- if $isClusterScoped }}
			Description: "Unique identifier for this resource. The format is `<name>`.",
			{{- else }}
			Description: "Unique identifier for this resource. The format is `<namespace>/<name>`.",
			{{- end }}
		},
	{{- range .Properties }}
		{{- if (eq .Name "metadata") }}
			{{- if (stringContains $modelName "Project") }}
			"metadata": utils.MetadataSchema("{{ $modelName }}", true, true),
			{{- else }}
			"metadata": utils.MetadataSchema("{{ $modelName }}", true, false),
			{{- end }}
		{{- else if (eq .Name "spec") }}
			"spec": {
				Type: 		schema.TypeList,
				Elem: &schema.Resource{
					Schema: schemas.{{.GoType | trimPrefix "ComGithubLoftShAPIV3PkgApis" | pascalize }}Schema(),
				},
				Required: 	true,
			},
		{{- end }}
	{{- end }}
	}
}

func {{ camelize $modelName }}Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	loftClient, ok := meta.(client.Client)
	if !ok {
		return diag.Errorf("Could not access loft client")
	}

	managementClient, err := loftClient.Management()
	if err != nil {
		return diag.FromErr(err)
	}

{{- if $isClusterScoped }}
	_, name := utils.ParseID(d.Id())
{{- else }}
	namespace, name := utils.ParseID(d.Id())
	if namespace == "" {
		return diag.Errorf("`namespace` is required for all namespaced resources")
	}
{{- end }}
	if name == "" {
		return diag.Errorf("`name` is required for all resources")
	}

{{ if $isClusterScoped }}
	instance, err := managementClient.Loft().ManagementV1().{{ $modelsName }}().Get(ctx, name, metav1.GetOptions{})
{{- else }}
	instance, err := managementClient.Loft().ManagementV1().{{ $modelsName }}(namespace).Get(ctx, name, metav1.GetOptions{})
{{- end }}
	if err != nil {
		return diag.FromErr(err)
	}

	{{- range .Properties }}
		{{ if (eq .Name "metadata") }}
	{{ varname .Name }}, err := utils.ReadMetadata(instance.ObjectMeta)
	if err != nil {
		return diag.FromErr(err)
	}

	if err := d.Set("{{ snakize .Name}}", []interface{}{ {{ varname .Name }} }); err != nil {
		return diag.FromErr(err)
	}
		{{ else if (eq .Name "spec") }}
	{{ varname .Name }}, err := schemas.Read{{.GoType | trimPrefix "ComGithubLoftShAPIV3PkgApis" | pascalize }}(&instance.Spec)
	if err != nil {
		return diag.FromErr(err)
	}

	if err := d.Set("{{ snakize .Name}}", []interface{}{ {{ varname .Name }} }); err != nil {
		return diag.FromErr(err)
	}
		{{- end}}
	{{- end}}
	return nil
}

func {{ camelize $modelName }}Create(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	loftClient, ok := meta.(client.Client)
	if !ok {
		return diag.Errorf("Could not access loft client")
	}

	managementClient, err := loftClient.Management()
	if err != nil {
		return diag.FromErr(err)
	}

	metadata := utils.CreateMetadata(d.Get("metadata").([]interface{}))

	spec := schemas.Create{{.GoType | trimPrefix "ComGithubLoftShAPIV3PkgApis" | pascalize }}Spec(d.Get("spec.0").(map[string]interface{}))

	{{ if $isClusterScoped }}
	instance, err := managementClient.Loft().ManagementV1().{{ $modelsName }}().Create(ctx, &managementv1.{{ $modelName }}{
		ObjectMeta: metadata,
		Spec:       *spec,
	}, metav1.CreateOptions{})
	{{- else }}
	instance, err := managementClient.Loft().ManagementV1().{{ $modelsName }}(metadata.Namespace).Create(ctx, &managementv1.{{ $modelName }}{
		ObjectMeta: metadata,
		Spec:       *spec,
	}, metav1.CreateOptions{})
	{{- end }}
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(utils.ReadId(instance.ObjectMeta))

	return {{ varname $modelName }}Read(ctx, d, meta)
}

func {{ camelize $modelName }}Update(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	loftClient, ok := meta.(client.Client)
	if !ok {
		return diag.Errorf("Could not access loft client")
	}

	managementClient, err := loftClient.Management()
	if err != nil {
		return diag.FromErr(err)
	}

	{{- if $isClusterScoped }}
	_, name := utils.ParseID(d.Id())
	oldInstance, err := managementClient.Loft().ManagementV1().{{ $modelsName }}().Get(ctx, name, metav1.GetOptions{})
	{{- else }}
	namespace, name := utils.ParseID(d.Id())
	oldInstance, err := managementClient.Loft().ManagementV1().{{ $modelsName }}(namespace).Get(ctx, name, metav1.GetOptions{})
	{{- end }}
	if err != nil {
		return diag.FromErr(err)
	}

	modifiedInstance := oldInstance.DeepCopy()

	if d.HasChange("spec") {
		if v, ok := d.Get("spec").([]interface{}); ok && len(v) > 0 {
			modifiedInstance.Spec = *schemas.Create{{.GoType | trimPrefix "ComGithubLoftShAPIV3PkgApis" | pascalize }}Spec(v[0].(map[string]interface{}))
		}
	}

	patch := ctrlclient.MergeFrom(oldInstance)
	rawPatch, err := patch.Data(modifiedInstance)
	if err != nil {
		return diag.FromErr(err)
	}

	{{- if $isClusterScoped }}
	if _, err := managementClient.Loft().ManagementV1().{{ $modelsName }}().Patch(ctx, name, patch.Type(), rawPatch, metav1.PatchOptions{}); err != nil {
	{{- else }}
	if _, err := managementClient.Loft().ManagementV1().{{ $modelsName }}(namespace).Patch(ctx, name, patch.Type(), rawPatch, metav1.PatchOptions{}); err != nil {
	{{- end }}
		return diag.FromErr(err)
	}

	return {{ varname $modelName }}Read(ctx, d, meta)
}

func {{ camelize $modelName }}Delete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	loftClient, ok := meta.(client.Client)
	if !ok {
		return diag.Errorf("Could not access loft client")
	}

	managementClient, err := loftClient.Management()
	if err != nil {
		return diag.FromErr(err)
	}

	metadata := utils.CreateMetadata(d.Get("metadata").([]interface{}))

	{{- if $isClusterScoped }}
	err = managementClient.Loft().ManagementV1().{{ $modelsName }}().Delete(ctx, metadata.Name, metav1.DeleteOptions{})
	{{- else }}
	err = managementClient.Loft().ManagementV1().{{ $modelsName }}(metadata.Namespace).Delete(ctx, metadata.Name, metav1.DeleteOptions{})
	{{- end }}
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}