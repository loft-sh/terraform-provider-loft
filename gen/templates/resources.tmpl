//// Code generated by go-swagger; DO NOT EDIT.

{{ define "handleNonBodyParam" }}
	{{ camelize .ID }}Val, {{ camelize .ID }}IsSet := d.GetOk("{{ snakize .ID}}")
	if({{ camelize .ID }}IsSet){
		{{- if eq (camelize .ID) "id" }}
			{{ camelize .ID }}, _ := strconv.Atoi({{ camelize .ID }}Val.(string))
			params.{{ pascalize .ID}} = {{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}{{ end }}{{ if not .IsFileParam }}{{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}&{{ end }}int32({{ camelize .ID }}){{ else }}runtime.NamedReadCloser{{- end -}}
		{{- else }}
			params.{{ pascalize .ID}} = {{ camelize .ID }}Val.({{ if and (not .IsArray) (not .IsMap) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) (or .IsNullable  ) }}*{{ end }}{{ .GoType }})
		{{- end }}
	} {{ if .Required }} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - {{ .Name }}")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	} {{ end }}
{{ end }}

{{- $operationGroup := .Name -}} {{/* friendly reminder that operation groups map to OpenAPI Tags */}}

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/loft-sh/terraform-provider-loft/loft/schemas"
	"github.com/loft-sh/terraform-provider-loft/loft/utils"
)

{{- $modelName := splitList "." .Name | last }}
func {{ pascalize $modelName }}Resource() *schema.Resource {
	return &schema.Resource{
		Description: "",
		Schema: {{ camelize $modelName }}Attributes(),
		CreateContext: {{ camelize $modelName }}Create,
		ReadContext: {{ camelize $modelName }}Read,
		UpdateContext: {{ camelize $modelName }}Update,
		DeleteContext: {{ camelize $modelName }}Delete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func {{ camelize $modelName }}Attributes() map[string]*schema.Schema {
	return map[string]*schema.Schema{
	{{- range .Properties }}
		{{- if (eq .Name "metadata") }}
			"metadata": utils.MetadataSchema("{{ $modelName }}", true),
		{{- else if (eq .Name "spec") }}
			"spec": {
				Type: 		schema.TypeList,
				Optional: 	true,
				Elem: &schema.Resource{
					Schema: schemas.{{.GoType | trimPrefix "ComGithubLoftShAPIV3PkgApis" | pascalize }}Schema(),
				},
				ConfigMode: schema.SchemaConfigModeAttr,
			},
		{{- end }}
	{{- end }}
	}
}

func {{ camelize $modelName }}Create(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	return nil
}

func {{ camelize $modelName }}Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	return nil
}

func {{ camelize $modelName }}Update(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	return nil
}

func {{ camelize $modelName }}Delete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	return nil
}