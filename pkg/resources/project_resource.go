//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	managementv1 "github.com/loft-sh/api/v2/pkg/apis/management/v1"
	"github.com/loft-sh/loftctl/v2/pkg/client"
	"github.com/loft-sh/terraform-provider-loft/pkg/schemas"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func ProjectResource() *schema.Resource {
	return &schema.Resource{
		Description:   "Project holds the Project information",
		Schema:        projectAttributes(),
		CreateContext: projectCreate,
		ReadContext:   projectRead,
		UpdateContext: projectUpdate,
		DeleteContext: projectDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func projectAttributes() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"id": {
			Type:        schema.TypeString,
			Computed:    true,
			Description: "Unique identifier for this resource. The format is `<name>`.",
		},
		"metadata": utils.MetadataSchema("Project", true, true),
		"spec": {
			Type:     schema.TypeList,
			Optional: true,
			Elem: &schema.Resource{
				Schema: schemas.ManagementV1ProjectSpecSchema(),
			},
		},
	}
}

func projectRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	loftClient, ok := meta.(client.Client)
	if !ok {
		return diag.Errorf("Could not access loft client")
	}

	managementClient, err := loftClient.Management()
	if err != nil {
		return diag.FromErr(err)
	}

	_, name := utils.ParseID(d.Id())
	instance, err := managementClient.Loft().ManagementV1().Projects().Get(ctx, name, metav1.GetOptions{})
	if err != nil {
		return diag.FromErr(err)
	}

	metadata, err := utils.ReadMetadata(instance.ObjectMeta)
	if err != nil {
		return diag.FromErr(err)
	}

	if err := d.Set("metadata", []interface{}{metadata}); err != nil {
		return diag.FromErr(err)
	}

	spec, err := schemas.ReadManagementV1ProjectSpec(&instance.Spec)
	if err != nil {
		return diag.FromErr(err)
	}

	if err := d.Set("spec", []interface{}{spec}); err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func projectCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	loftClient, ok := meta.(client.Client)
	if !ok {
		return diag.Errorf("Could not access loft client")
	}

	managementClient, err := loftClient.Management()
	if err != nil {
		return diag.FromErr(err)
	}

	metadata := utils.CreateMetadata(d.Get("metadata").([]interface{}))
	spec := schemas.CreateManagementV1ProjectSpec(d.Get("spec").([]interface{}))

	instance, err := managementClient.Loft().ManagementV1().Projects().Create(ctx, &managementv1.Project{
		ObjectMeta: metadata,
		Spec:       *spec,
	}, metav1.CreateOptions{})
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(utils.ReadId(instance.ObjectMeta))

	return projectRead(ctx, d, meta)
}

func projectUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	return nil
}

func projectDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	loftClient, ok := meta.(client.Client)
	if !ok {
		return diag.Errorf("Could not access loft client")
	}

	managementClient, err := loftClient.Management()
	if err != nil {
		return diag.FromErr(err)
	}

	metadata := utils.CreateMetadata(d.Get("metadata").([]interface{}))

	err = managementClient.Loft().ManagementV1().Projects().Delete(ctx, metadata.Name, metav1.DeleteOptions{})
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}
