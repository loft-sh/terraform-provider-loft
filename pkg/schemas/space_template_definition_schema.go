//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	agentstoragev1 "github.com/loft-sh/agentapi/v3/pkg/apis/loft/storage/v1"
	storagev1 "github.com/loft-sh/api/v3/pkg/apis/storage/v1"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
)

func StorageV1SpaceTemplateDefinitionSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"access": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1InstanceAccessSchema(),
			},
			Description: "The space access",
			Optional:    true,
		},
		"apps": {
			Type: schema.TypeList,
			Elem: &schema.Resource{
				Schema: StorageV1AppReferenceSchema(),
			},
			Description: "Apps specifies the apps that should get deployed by this template",
			Optional:    true,
		},
		"charts": {
			Type: schema.TypeList,
			Elem: &schema.Resource{
				Schema: StorageV1TemplateHelmChartSchema(),
			},
			Description: "Charts are helm charts that should get deployed",
			Optional:    true,
		},
		"metadata": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1TemplateMetadataSchema(),
			},
			Description: "The space metadata",
			Optional:    true,
		},
		"objects": {
			Type:        schema.TypeString,
			Description: "Objects are Kubernetes style yamls that should get deployed into the virtual cluster",
			Optional:    true,
		},
	}
}

func CreateStorageV1SpaceTemplateDefinition(data map[string]interface{}) *storagev1.SpaceTemplateDefinition {
	if !utils.HasKeys(data) {
		return nil
	}

	ret := &storagev1.SpaceTemplateDefinition{}

	if v, ok := data["access"].([]interface{}); ok && len(v) > 0 && v[0] != nil {
		ret.Access = CreateStorageV1InstanceAccess(v[0].(map[string]interface{}))
	}

	var appsItems []agentstoragev1.AppReference
	for _, v := range data["apps"].([]interface{}) {
		if v == nil {
			continue
		}
		if item := CreateStorageV1AppReference(v.(map[string]interface{})); item != nil {
			appsItems = append(appsItems, *item)
		}
	}
	ret.Apps = appsItems

	var chartsItems []agentstoragev1.TemplateHelmChart
	for _, v := range data["charts"].([]interface{}) {
		if v == nil {
			continue
		}
		if item := CreateStorageV1TemplateHelmChart(v.(map[string]interface{})); item != nil {
			chartsItems = append(chartsItems, *item)
		}
	}
	ret.Charts = chartsItems

	if v, ok := data["metadata"].([]interface{}); ok && len(v) > 0 && v[0] != nil {
		ret.TemplateMetadata = *CreateStorageV1TemplateMetadata(v[0].(map[string]interface{}))
	}

	if v, ok := data["objects"].(string); ok && len(v) > 0 {
		ret.Objects = v
	}

	return ret
}

func ReadStorageV1SpaceTemplateDefinition(obj *storagev1.SpaceTemplateDefinition) (interface{}, error) {
	if obj == nil {
		return nil, nil
	}

	values := map[string]interface{}{}
	access, err := ReadStorageV1InstanceAccess(obj.Access)
	if err != nil {
		return nil, err
	}
	if access != nil {
		values["access"] = []interface{}{access}
	}

	var appsItems []interface{}
	for _, v := range obj.Apps {
		item, err := ReadStorageV1AppReference(&v)
		if err != nil {
			return nil, err
		}
		appsItems = append(appsItems, item)
	}
	values["apps"] = appsItems

	var chartsItems []interface{}
	for _, v := range obj.Charts {
		item, err := ReadStorageV1TemplateHelmChart(&v)
		if err != nil {
			return nil, err
		}
		chartsItems = append(chartsItems, item)
	}
	values["charts"] = chartsItems

	metadata, err := ReadStorageV1TemplateMetadata(&obj.TemplateMetadata)
	if err != nil {
		return nil, err
	}
	if metadata != nil {
		values["metadata"] = []interface{}{metadata}
	}

	values["objects"] = obj.Objects

	return values, nil
}
