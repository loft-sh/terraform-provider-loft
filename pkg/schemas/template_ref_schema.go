//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	storagev1 "github.com/loft-sh/api/v2/pkg/apis/storage/v1"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
)

func StorageV1TemplateRefSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"name": {
			Type:        schema.TypeString,
			Description: "Name holds the name of the template to reference.",
			Optional:    true,
		},
		"sync_once": {
			Type:        schema.TypeBool,
			Description: "SyncOnce tells the controller to sync the instance once with the template. This is useful if you want to sync an instance after a template was changed. To automatically sync an instance with a template, use 'x.x.x' as version instead.",
			Optional:    true,
		},
		"version": {
			Type:        schema.TypeString,
			Description: "Version holds the template version to use. Version is expected to be in semantic versioning format. Alternatively, you can also exchange major, minor or patch with an 'x' to tell Loft to automatically select the latest major, minor or patch version.",
			Optional:    true,
		},
	}
}

func CreateStorageV1TemplateRef(data map[string]interface{}) *storagev1.TemplateRef {
	if !utils.HasKeys(data) {
		return nil
	}

	ret := &storagev1.TemplateRef{}
	if v, ok := data["name"].(string); ok && len(v) > 0 {
		ret.Name = v
	}

	if v, ok := data["sync_once"].(bool); ok {
		ret.SyncOnce = v
	}

	if v, ok := data["version"].(string); ok && len(v) > 0 {
		ret.Version = v
	}

	return ret
}

func ReadStorageV1TemplateRef(obj *storagev1.TemplateRef) (interface{}, error) {
	if obj == nil {
		return nil, nil
	}

	values := map[string]interface{}{}
	values["name"] = obj.Name

	values["sync_once"] = obj.SyncOnce

	values["version"] = obj.Version

	return values, nil
}
