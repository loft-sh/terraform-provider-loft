//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	storagev1 "github.com/loft-sh/api/v3/pkg/apis/storage/v1"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
)

func StorageV1VaultIntegrationSpecSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"address": {
			Type:        schema.TypeString,
			Description: "Address defines the address of the Vault instance to use for this project. Will default to the `VAULT_ADDR` environment variable if not provided.",
			Optional:    true,
		},
		"auth": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1VaultAuthSpecSchema(),
			},
			Description: "Auth defines the authentication method to use for this project.",
			Optional:    true,
		},
		"enabled": {
			Type:        schema.TypeBool,
			Description: "Enabled indicates if the Vault Integration is enabled for the project -- this knob only enables the syncing of secrets to or from Vault, but does not setup Kubernetes authentication methods or Kubernetes secrets engines for vclusters.",
			Optional:    true,
		},
		"namespace": {
			Type:        schema.TypeString,
			Description: "Namespace defines the namespace to use when storing secrets in Vault.",
			Optional:    true,
		},
		"skip_tls_verify": {
			Type:        schema.TypeBool,
			Description: "SkipTLSVerify defines if TLS verification should be skipped when connecting to Vault.",
			Optional:    true,
		},
		"sync_interval": {
			Type:        schema.TypeString,
			Description: "SyncInterval defines the interval at which to sync secrets from Vault. Defaults to `1m.` See https://pkg.go.dev/time#ParseDuration for supported formats.",
			Optional:    true,
		},
	}
}

func CreateStorageV1VaultIntegrationSpec(data map[string]interface{}) *storagev1.VaultIntegrationSpec {
	if !utils.HasKeys(data) {
		return nil
	}

	ret := &storagev1.VaultIntegrationSpec{}
	if v, ok := data["address"].(string); ok && len(v) > 0 {
		ret.Address = v
	}

	if v, ok := data["auth"].([]interface{}); ok && len(v) > 0 && v[0] != nil {
		ret.Auth = CreateStorageV1VaultAuthSpec(v[0].(map[string]interface{}))
	}

	if v, ok := data["enabled"].(bool); ok {
		ret.Enabled = v
	}

	if v, ok := data["namespace"].(string); ok && len(v) > 0 {
		ret.Namespace = v
	}

	if v, ok := data["skip_tls_verify"].(bool); ok {
		ret.SkipTLSVerify = v
	}

	if v, ok := data["sync_interval"].(string); ok && len(v) > 0 {
		ret.SyncInterval = v
	}

	return ret
}

func ReadStorageV1VaultIntegrationSpec(obj *storagev1.VaultIntegrationSpec) (interface{}, error) {
	if obj == nil {
		return nil, nil
	}

	values := map[string]interface{}{}
	values["address"] = obj.Address

	auth, err := ReadStorageV1VaultAuthSpec(obj.Auth)
	if err != nil {
		return nil, err
	}
	values["auth"] = auth

	values["enabled"] = obj.Enabled

	values["namespace"] = obj.Namespace

	values["skip_tls_verify"] = obj.SkipTLSVerify

	values["sync_interval"] = obj.SyncInterval

	return values, nil
}
