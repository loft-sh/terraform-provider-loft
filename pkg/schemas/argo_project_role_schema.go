//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	storagev1 "github.com/loft-sh/api/v3/pkg/apis/storage/v1"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
)

func StorageV1ArgoProjectRoleSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"description": {
			Type:        schema.TypeString,
			Description: "Description to add to the ArgoCD project.",
			Optional:    true,
		},
		"groups": {
			Type: schema.TypeList,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
			Description: "Groups is a list of OIDC group names to bind to the role.",
			Optional:    true,
		},
		"name": {
			Type:        schema.TypeString,
			Description: "Name of the ArgoCD role to attach to the project.",
			Optional:    true,
		},
		"rules": {
			Type: schema.TypeList,
			Elem: &schema.Resource{
				Schema: StorageV1ArgoProjectPolicyRuleSchema(),
			},
			Description: "Rules ist a list of policy rules to attach to the role.",
			Optional:    true,
		},
	}
}

func CreateStorageV1ArgoProjectRole(data map[string]interface{}) *storagev1.ArgoProjectRole {
	if !utils.HasKeys(data) {
		return nil
	}

	ret := &storagev1.ArgoProjectRole{}
	if v, ok := data["description"].(string); ok && len(v) > 0 {
		ret.Description = v
	}

	var groupsItems []string
	for _, v := range data["groups"].([]interface{}) {
		groupsItems = append(groupsItems, v.(string))
	}
	ret.Groups = groupsItems

	if v, ok := data["name"].(string); ok && len(v) > 0 {
		ret.Name = v
	}

	var rulesItems []storagev1.ArgoProjectPolicyRule
	for _, v := range data["rules"].([]interface{}) {
		if v == nil {
			continue
		}
		if item := CreateStorageV1ArgoProjectPolicyRule(v.(map[string]interface{})); item != nil {
			rulesItems = append(rulesItems, *item)
		}
	}
	ret.Rules = rulesItems

	return ret
}

func ReadStorageV1ArgoProjectRole(obj *storagev1.ArgoProjectRole) (interface{}, error) {
	if obj == nil {
		return nil, nil
	}

	values := map[string]interface{}{}
	values["description"] = obj.Description

	var groupsItems []interface{}
	for _, v := range obj.Groups {
		groupsItems = append(groupsItems, v)
	}
	values["groups"] = groupsItems

	values["name"] = obj.Name

	var rulesItems []interface{}
	for _, v := range obj.Rules {
		item, err := ReadStorageV1ArgoProjectPolicyRule(&v)
		if err != nil {
			return nil, err
		}
		rulesItems = append(rulesItems, item)
	}
	values["rules"] = rulesItems

	return values, nil
}
