//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	storagev1 "github.com/loft-sh/api/v3/pkg/apis/storage/v1"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
)

func StorageV1RancherIntegrationSpecSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"enabled": {
			Type:        schema.TypeBool,
			Description: "Enabled indicates if the Rancher Project Integration is enabled for this project.",
			Optional:    true,
		},
		"import_virtual_clusters": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1ImportVirtualClustersSpecSchema(),
			},
			Description: "ImportVirtualClusters defines settings to import virtual clusters to Rancher on creation",
			Optional:    true,
		},
		"project_ref": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1RancherProjectRefSchema(),
			},
			Description: "ProjectRef defines references to rancher project, required for syncMembers and syncVirtualClusters.syncMembers",
			Optional:    true,
		},
		"sync_members": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1SyncMembersSpecSchema(),
			},
			Description: "SyncMembers defines settings to sync Rancher project members to the loft project",
			Optional:    true,
		},
	}
}

func CreateStorageV1RancherIntegrationSpec(data map[string]interface{}) *storagev1.RancherIntegrationSpec {
	if !utils.HasKeys(data) {
		return nil
	}

	ret := &storagev1.RancherIntegrationSpec{}
	if v, ok := data["enabled"].(bool); ok {
		ret.Enabled = v
	}

	if v, ok := data["import_virtual_clusters"].([]interface{}); ok && len(v) > 0 && v[0] != nil {
		ret.ImportVirtualClusters = *CreateStorageV1ImportVirtualClustersSpec(v[0].(map[string]interface{}))
	}

	if v, ok := data["project_ref"].([]interface{}); ok && len(v) > 0 && v[0] != nil {
		ret.ProjectRef = *CreateStorageV1RancherProjectRef(v[0].(map[string]interface{}))
	}

	if v, ok := data["sync_members"].([]interface{}); ok && len(v) > 0 && v[0] != nil {
		ret.SyncMembers = *CreateStorageV1SyncMembersSpec(v[0].(map[string]interface{}))
	}

	return ret
}

func ReadStorageV1RancherIntegrationSpec(obj *storagev1.RancherIntegrationSpec) (interface{}, error) {
	if obj == nil {
		return nil, nil
	}

	values := map[string]interface{}{}
	values["enabled"] = obj.Enabled

	importVirtualClusters, err := ReadStorageV1ImportVirtualClustersSpec(&obj.ImportVirtualClusters)
	if err != nil {
		return nil, err
	}
	values["import_virtual_clusters"] = importVirtualClusters

	projectRef, err := ReadStorageV1RancherProjectRef(&obj.ProjectRef)
	if err != nil {
		return nil, err
	}
	values["project_ref"] = projectRef

	syncMembers, err := ReadStorageV1SyncMembersSpec(&obj.SyncMembers)
	if err != nil {
		return nil, err
	}
	values["sync_members"] = syncMembers

	return values, nil
}
