//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	storagev1 "github.com/loft-sh/api/v3/pkg/apis/storage/v1"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
	"k8s.io/utils/ptr"
)

func StorageV1AppParameterSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"default_value": {
			Type:        schema.TypeString,
			Description: "DefaultValue is the default value if none is specified",
			Optional:    true,
		},
		"description": {
			Type:        schema.TypeString,
			Description: "Description is the description to show for this parameter",
			Optional:    true,
		},
		"invalidation": {
			Type:        schema.TypeString,
			Description: "Invalidation regex that if matched will reject the input",
			Optional:    true,
		},
		"label": {
			Type:        schema.TypeString,
			Description: "Label is the label to show for this parameter",
			Optional:    true,
		},
		"max": {
			Type:        schema.TypeInt,
			Description: "Max is the maximum number if type is number",
			Optional:    true,
		},
		"min": {
			Type:        schema.TypeInt,
			Description: "Min is the minimum number if type is number",
			Optional:    true,
		},
		"options": {
			Type: schema.TypeList,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
			Description: "Options are the options if type is enum",
			Optional:    true,
		},
		"placeholder": {
			Type:        schema.TypeString,
			Description: "Placeholder shown in the UI",
			Optional:    true,
		},
		"required": {
			Type:        schema.TypeBool,
			Description: "Required specifies if this parameter is required",
			Optional:    true,
		},
		"section": {
			Type:        schema.TypeString,
			Description: "Section where this app should be displayed. Apps with the same section name will be grouped together",
			Optional:    true,
		},
		"type": {
			Type:        schema.TypeString,
			Description: "Type of the parameter. Can be one of: string, multiline, boolean, enum and password",
			Optional:    true,
		},
		"validation": {
			Type:        schema.TypeString,
			Description: "Validation regex that if matched will allow the input",
			Optional:    true,
		},
		"variable": {
			Type:        schema.TypeString,
			Description: "Variable is the path of the variable. Can be foo or foo.bar for nested objects.",
			Optional:    true,
		},
	}
}

func CreateStorageV1AppParameter(data map[string]interface{}) *storagev1.AppParameter {
	if !utils.HasKeys(data) {
		return nil
	}

	ret := &storagev1.AppParameter{}
	if v, ok := data["default_value"].(string); ok && len(v) > 0 {
		ret.DefaultValue = v
	}

	if v, ok := data["description"].(string); ok && len(v) > 0 {
		ret.Description = v
	}

	if v, ok := data["invalidation"].(string); ok && len(v) > 0 {
		ret.Invalidation = v
	}

	if v, ok := data["label"].(string); ok && len(v) > 0 {
		ret.Label = v
	}

	if v, ok := data["max"].(int32); ok {
		ret.Max = ptr.To(int(v))
	}

	if v, ok := data["min"].(int32); ok {
		ret.Min = ptr.To(int(v))
	}

	var optionsItems []string
	for _, v := range data["options"].([]interface{}) {
		optionsItems = append(optionsItems, v.(string))
	}
	ret.Options = optionsItems

	if v, ok := data["placeholder"].(string); ok && len(v) > 0 {
		ret.Placeholder = v
	}

	if v, ok := data["required"].(bool); ok {
		ret.Required = v
	}

	if v, ok := data["section"].(string); ok && len(v) > 0 {
		ret.Section = v
	}

	if v, ok := data["type"].(string); ok && len(v) > 0 {
		ret.Type = v
	}

	if v, ok := data["validation"].(string); ok && len(v) > 0 {
		ret.Validation = v
	}

	if v, ok := data["variable"].(string); ok && len(v) > 0 {
		ret.Variable = v
	}

	return ret
}

func ReadStorageV1AppParameter(obj *storagev1.AppParameter) (interface{}, error) {
	if obj == nil {
		return nil, nil
	}

	values := map[string]interface{}{}
	values["default_value"] = obj.DefaultValue

	values["description"] = obj.Description

	values["invalidation"] = obj.Invalidation

	values["label"] = obj.Label

	values["max"] = obj.Max

	values["min"] = obj.Min

	var optionsItems []interface{}
	for _, v := range obj.Options {
		optionsItems = append(optionsItems, v)
	}
	values["options"] = optionsItems

	values["placeholder"] = obj.Placeholder

	values["required"] = obj.Required

	values["section"] = obj.Section

	values["type"] = obj.Type

	values["validation"] = obj.Validation

	values["variable"] = obj.Variable

	return values, nil
}
