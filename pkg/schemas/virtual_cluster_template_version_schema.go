//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	storagev1 "github.com/loft-sh/api/v3/pkg/apis/storage/v1"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
)

func StorageV1VirtualClusterTemplateVersionSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"parameters": {
			Type: schema.TypeList,
			Elem: &schema.Resource{
				Schema: StorageV1AppParameterSchema(),
			},
			Description: "Parameters define additional app parameters that will set helm values",
			Optional:    true,
		},
		"template": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1VirtualClusterTemplateDefinitionSchema(),
			},
			Description: "Template holds the space template",
			Optional:    true,
		},
		"version": {
			Type:        schema.TypeString,
			Description: "Version is the version. Needs to be in X.X.X format.",
			Optional:    true,
		},
	}
}

func CreateStorageV1VirtualClusterTemplateVersion(data map[string]interface{}) *storagev1.VirtualClusterTemplateVersion {
	if !utils.HasKeys(data) {
		return nil
	}

	ret := &storagev1.VirtualClusterTemplateVersion{}

	var parametersItems []storagev1.AppParameter
	for _, v := range data["parameters"].([]interface{}) {
		if v == nil {
			continue
		}
		if item := CreateStorageV1AppParameter(v.(map[string]interface{})); item != nil {
			parametersItems = append(parametersItems, *item)
		}
	}
	ret.Parameters = parametersItems

	if v, ok := data["template"].([]interface{}); ok && len(v) > 0 && v[0] != nil {
		ret.Template = *CreateStorageV1VirtualClusterTemplateDefinition(v[0].(map[string]interface{}))
	}

	if v, ok := data["version"].(string); ok && len(v) > 0 {
		ret.Version = v
	}

	return ret
}

func ReadStorageV1VirtualClusterTemplateVersion(obj *storagev1.VirtualClusterTemplateVersion) (interface{}, error) {
	if obj == nil {
		return nil, nil
	}

	values := map[string]interface{}{}
	var parametersItems []interface{}
	for _, v := range obj.Parameters {
		item, err := ReadStorageV1AppParameter(&v)
		if err != nil {
			return nil, err
		}
		parametersItems = append(parametersItems, item)
	}
	values["parameters"] = parametersItems

	template, err := ReadStorageV1VirtualClusterTemplateDefinition(&obj.Template)
	if err != nil {
		return nil, err
	}
	values["template"] = template

	values["version"] = obj.Version

	return values, nil
}
