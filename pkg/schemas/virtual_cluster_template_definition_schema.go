//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func StorageV1VirtualClusterTemplateDefinitionSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"access": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1InstanceAccessSchema(),
			},
			Description: "Access defines the access of users and teams to the virtual cluster.",
			Optional:    true,
		},
		"access_point": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1VirtualClusterAccessPointSchema(),
			},
			Description: "AccessPoint defines settings to expose the virtual cluster directly via an ingress rather than through the (default) Loft proxy",
			Optional:    true,
		},
		"apps": {
			Type: schema.TypeList,
			Elem: &schema.Resource{
				Schema: StorageV1AppReferenceSchema(),
			},
			Description: "Apps specifies the apps that should get deployed by this template",
			Optional:    true,
		},
		"charts": {
			Type: schema.TypeList,
			Elem: &schema.Resource{
				Schema: StorageV1TemplateHelmChartSchema(),
			},
			Description: "Charts are helm charts that should get deployed",
			Optional:    true,
		},
		"helm_release": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1VirtualClusterHelmReleaseSchema(),
			},
			Description: "HelmRelease is the helm release configuration for the virtual cluster.",
			Optional:    true,
		},
		"metadata": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1TemplateMetadataSchema(),
			},
			Description: "The virtual cluster metadata",
			Optional:    true,
		},
		"objects": {
			Type:        schema.TypeString,
			Description: "Objects are Kubernetes style yamls that should get deployed into the virtual cluster",
			Optional:    true,
		},
		"space_template": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1VirtualClusterSpaceTemplateDefinitionSchema(),
			},
			Description: "SpaceTemplate holds the space template",
			Optional:    true,
		},
	}
}
