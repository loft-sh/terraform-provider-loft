//// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	agentstoragev1 "github.com/loft-sh/agentapi/v2/pkg/apis/loft/storage/v1"
	storagev1 "github.com/loft-sh/api/v2/pkg/apis/storage/v1"
	"github.com/loft-sh/terraform-provider-loft/pkg/utils"
)

func StorageV1VirtualClusterTemplateDefinitionSchema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"access": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1InstanceAccessSchema(),
			},
			Description: "Access defines the access of users and teams to the virtual cluster.",
			Optional:    true,
		},
		"access_point": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1VirtualClusterAccessPointSchema(),
			},
			Description: "AccessPoint defines settings to expose the virtual cluster directly via an ingress rather than through the (default) Loft proxy",
			Optional:    true,
		},
		"apps": {
			Type: schema.TypeList,
			Elem: &schema.Resource{
				Schema: StorageV1AppReferenceSchema(),
			},
			Description: "Apps specifies the apps that should get deployed by this template",
			Optional:    true,
		},
		"charts": {
			Type: schema.TypeList,
			Elem: &schema.Resource{
				Schema: StorageV1TemplateHelmChartSchema(),
			},
			Description: "Charts are helm charts that should get deployed",
			Optional:    true,
		},
		"helm_release": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1VirtualClusterHelmReleaseSchema(),
			},
			Description: "HelmRelease is the helm release configuration for the virtual cluster.",
			Optional:    true,
		},
		"metadata": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1TemplateMetadataSchema(),
			},
			Description: "The virtual cluster metadata",
			Optional:    true,
		},
		"objects": {
			Type:        schema.TypeString,
			Description: "Objects are Kubernetes style yamls that should get deployed into the virtual cluster",
			Optional:    true,
		},
		"space_template": {
			Type:     schema.TypeList,
			MinItems: 1,
			MaxItems: 1,
			Elem: &schema.Resource{
				Schema: StorageV1VirtualClusterSpaceTemplateDefinitionSchema(),
			},
			Description: "SpaceTemplate holds the space template",
			Optional:    true,
		},
	}
}

func CreateStorageV1VirtualClusterTemplateDefinition(in []interface{}) *storagev1.VirtualClusterTemplateDefinition {
	if !utils.HasValue(in) {
		return nil
	}

	ret := &storagev1.VirtualClusterTemplateDefinition{}

	data := in[0].(map[string]interface{})
	ret.Access = CreateStorageV1InstanceAccess(data["access"].([]interface{}))

	if value := CreateStorageV1VirtualClusterAccessPoint(data["access_point"].([]interface{})); value != nil {
		ret.AccessPoint = *value
	}

	var appsItems []agentstoragev1.AppReference
	for _, v := range data["apps"].([]interface{}) {
		if item := CreateStorageV1AppReference(v.([]interface{})); item != nil {
			appsItems = append(appsItems, *item)
		}
	}
	ret.Apps = appsItems

	var chartsItems []agentstoragev1.TemplateHelmChart
	for _, v := range data["charts"].([]interface{}) {
		if item := CreateStorageV1TemplateHelmChart(v.([]interface{})); item != nil {
			chartsItems = append(chartsItems, *item)
		}
	}
	ret.Charts = chartsItems

	if value := CreateStorageV1VirtualClusterHelmRelease(data["helm_release"].([]interface{})); value != nil {
		ret.HelmRelease = *value
	}

	if value := CreateStorageV1TemplateMetadata(data["metadata"].([]interface{})); value != nil {
		ret.TemplateMetadata = *value
	}

	if v, ok := data["objects"].(string); ok && len(v) > 0 {
		ret.Objects = v
	}

	if value := CreateStorageV1VirtualClusterSpaceTemplateDefinition(data["space_template"].([]interface{})); value != nil {
		ret.SpaceTemplate = *value
	}

	return ret
}

func ReadStorageV1VirtualClusterTemplateDefinition(obj *storagev1.VirtualClusterTemplateDefinition) (interface{}, error) {
	values := map[string]interface{}{}

	access, err := ReadStorageV1InstanceAccess(obj.Access)
	if err != nil {
		return nil, err
	}
	values["access"] = access

	accessPoint, err := ReadStorageV1VirtualClusterAccessPoint(&obj.AccessPoint)
	if err != nil {
		return nil, err
	}
	values["access_point"] = accessPoint

	var appsItems []interface{}
	for _, v := range obj.Apps {
		item, err := ReadStorageV1AppReference(&v)
		if err != nil {
			return nil, err
		}
		appsItems = append(appsItems, item)
	}
	values["apps"] = appsItems

	var chartsItems []interface{}
	for _, v := range obj.Charts {
		item, err := ReadStorageV1TemplateHelmChart(&v)
		if err != nil {
			return nil, err
		}
		chartsItems = append(chartsItems, item)
	}
	values["charts"] = chartsItems

	helmRelease, err := ReadStorageV1VirtualClusterHelmRelease(&obj.HelmRelease)
	if err != nil {
		return nil, err
	}
	values["helm_release"] = helmRelease

	metadata, err := ReadStorageV1TemplateMetadata(&obj.TemplateMetadata)
	if err != nil {
		return nil, err
	}
	values["metadata"] = metadata

	values["objects"] = obj.Objects

	spaceTemplate, err := ReadStorageV1VirtualClusterSpaceTemplateDefinition(&obj.SpaceTemplate)
	if err != nil {
		return nil, err
	}
	values["space_template"] = spaceTemplate

	return values, nil
}
